
-- =============================================================
-- PRY2204 - Exp3 - Semana 8
-- Actividad Sumativa: MiniMarket "Doña Marta"
-- DDL + ALTER + SEQUENCES + INSERT + REPORTS
-- =============================================================

/* Drops */
BEGIN EXECUTE IMMEDIATE 'DROP VIEW vw_producto_info'; EXCEPTION WHEN OTHERS THEN NULL; END; /
BEGIN EXECUTE IMMEDIATE 'DROP VIEW vw_empleado_datos'; EXCEPTION WHEN OTHERS THEN NULL; END; /

BEGIN EXECUTE IMMEDIATE 'DROP TABLE detalle_venta CASCADE CONSTRAINTS PURGE'; EXCEPTION WHEN OTHERS THEN NULL; END; /
BEGIN EXECUTE IMMEDIATE 'DROP TABLE venta CASCADE CONSTRAINTS PURGE'; EXCEPTION WHEN OTHERS THEN NULL; END; /

BEGIN EXECUTE IMMEDIATE 'DROP TABLE vendedor CASCADE CONSTRAINTS PURGE'; EXCEPTION WHEN OTHERS THEN NULL; END; /
BEGIN EXECUTE IMMEDIATE 'DROP TABLE empleado CASCADE CONSTRAINTS PURGE'; EXCEPTION WHEN OTHERS THEN NULL; END; /

BEGIN EXECUTE IMMEDIATE 'DROP TABLE producto CASCADE CONSTRAINTS PURGE'; EXCEPTION WHEN OTHERS THEN NULL; END; /
BEGIN EXECUTE IMMEDIATE 'DROP TABLE proveedor CASCADE CONSTRAINTS PURGE'; EXCEPTION WHEN OTHERS THEN NULL; END; /

BEGIN EXECUTE IMMEDIATE 'DROP TABLE marca CASCADE CONSTRAINTS PURGE'; EXCEPTION WHEN OTHERS THEN NULL; END; /
BEGIN EXECUTE IMMEDIATE 'DROP TABLE categoria CASCADE CONSTRAINTS PURGE'; EXCEPTION WHEN OTHERS THEN NULL; END; /
BEGIN EXECUTE IMMEDIATE 'DROP TABLE formato CASCADE CONSTRAINTS PURGE'; EXCEPTION WHEN OTHERS THEN NULL; END; /
BEGIN EXECUTE IMMEDIATE 'DROP TABLE origen CASCADE CONSTRAINTS PURGE'; EXCEPTION WHEN OTHERS THEN NULL; END; /

BEGIN EXECUTE IMMEDIATE 'DROP TABLE medio_pago CASCADE CONSTRAINTS PURGE'; EXCEPTION WHEN OTHERS THEN NULL; END; /
BEGIN EXECUTE IMMEDIATE 'DROP TABLE afp CASCADE CONSTRAINTS PURGE'; EXCEPTION WHEN OTHERS THEN NULL; END; /
BEGIN EXECUTE IMMEDIATE 'DROP TABLE salud CASCADE CONSTRAINTS PURGE'; EXCEPTION WHEN OTHERS THEN NULL; END; /

BEGIN EXECUTE IMMEDIATE 'DROP TABLE comuna CASCADE CONSTRAINTS PURGE'; EXCEPTION WHEN OTHERS THEN NULL; END; /
BEGIN EXECUTE IMMEDIATE 'DROP TABLE region CASCADE CONSTRAINTS PURGE'; EXCEPTION WHEN OTHERS THEN NULL; END; /

BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE seq_empleado'; EXCEPTION WHEN OTHERS THEN NULL; END; /
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE seq_salud'; EXCEPTION WHEN OTHERS THEN NULL; END; /

/* Region/Comuna/Medio */
CREATE TABLE region (id_region NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, nombre VARCHAR2(80) NOT NULL UNIQUE);
CREATE TABLE comuna  (id_comuna NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, nombre VARCHAR2(100) NOT NULL UNIQUE, id_region NUMBER NOT NULL,
                      CONSTRAINT comuna_region_fk FOREIGN KEY (id_region) REFERENCES region(id_region));
CREATE TABLE medio_pago (id_medio_pago NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, nombre VARCHAR2(50) NOT NULL UNIQUE);

/* Proveedor y taxonomías */
CREATE TABLE marca (id_marca NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, nombre VARCHAR2(80) NOT NULL UNIQUE);
CREATE TABLE categoria (id_categoria NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, nombre VARCHAR2(80) NOT NULL UNIQUE);
CREATE TABLE formato (id_formato NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, nombre VARCHAR2(80) NOT NULL UNIQUE);
CREATE TABLE origen  (id_origen NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, nombre VARCHAR2(80) NOT NULL UNIQUE);

CREATE TABLE proveedor (
  id_proveedor NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre       VARCHAR2(120) NOT NULL,
  email        VARCHAR2(150),
  telefono     VARCHAR2(30),
  id_comuna    NUMBER,
  CONSTRAINT proveedor_email_un UNIQUE (email),
  CONSTRAINT proveedor_comuna_fk FOREIGN KEY (id_comuna) REFERENCES comuna(id_comuna)
);

/* Producto */
CREATE TABLE producto (
  id_producto    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre         VARCHAR2(150) NOT NULL,
  id_marca       NUMBER NOT NULL,
  id_categoria   NUMBER NOT NULL,
  id_formato     NUMBER NOT NULL,
  id_origen      NUMBER NOT NULL,
  precio_compra  NUMBER(12,2) NOT NULL,
  precio_venta   NUMBER(12,2) NOT NULL,
  stock          NUMBER(10)   DEFAULT 0 NOT NULL,
  stock_minimo   NUMBER(10)   DEFAULT 3 NOT NULL,
  id_proveedor   NUMBER,
  CONSTRAINT producto_marca_fk     FOREIGN KEY (id_marca)     REFERENCES marca(id_marca),
  CONSTRAINT producto_categoria_fk FOREIGN KEY (id_categoria) REFERENCES categoria(id_categoria),
  CONSTRAINT producto_formato_fk   FOREIGN KEY (id_formato)   REFERENCES formato(id_formato),
  CONSTRAINT producto_origen_fk    FOREIGN KEY (id_origen)    REFERENCES origen(id_origen),
  CONSTRAINT producto_proveedor_fk FOREIGN KEY (id_proveedor) REFERENCES proveedor(id_proveedor),
  CONSTRAINT producto_stockmin_ck  CHECK (stock_minimo >= 3),
  CONSTRAINT producto_precios_ck   CHECK (precio_compra >= 0 AND precio_venta >= 0)
);

/* AFP (IDENTITY 210 +6) y SALUD (SEQ 2050 +10) */
CREATE TABLE afp (id_afp NUMBER GENERATED ALWAYS AS IDENTITY (START WITH 210 INCREMENT BY 6) PRIMARY KEY, nombre VARCHAR2(100) NOT NULL UNIQUE);
CREATE TABLE salud (id_salud NUMBER PRIMARY KEY, nombre VARCHAR2(100) NOT NULL UNIQUE);
CREATE SEQUENCE seq_salud START WITH 2050 INCREMENT BY 10 NOCACHE;

/* Empleado (SEQ 750 +3) y Vendedor */
CREATE TABLE empleado (
  id_empleado     NUMBER PRIMARY KEY,
  run_num         NUMBER(9),
  run_dv          CHAR(1),
  nombres         VARCHAR2(80)  NOT NULL,
  ap_paterno      VARCHAR2(80)  NOT NULL,
  ap_materno      VARCHAR2(80),
  direccion       VARCHAR2(150),
  id_comuna       NUMBER,
  activo          CHAR(1)       DEFAULT 'S' CHECK (activo IN ('S','N')),
  sueldo_base     NUMBER(12,2)  NOT NULL,
  bono_jefatura   NUMBER(12,2),
  id_afp          NUMBER,
  id_salud        NUMBER,
  CONSTRAINT empleado_comuna_fk FOREIGN KEY (id_comuna) REFERENCES comuna(id_comuna),
  CONSTRAINT empleado_afp_fk    FOREIGN KEY (id_afp)    REFERENCES afp(id_afp),
  CONSTRAINT empleado_salud_fk  FOREIGN KEY (id_salud)  REFERENCES salud(id_salud),
  CONSTRAINT empleado_sueldo_ck CHECK (sueldo_base >= 400000)
);
CREATE SEQUENCE seq_empleado START WITH 750 INCREMENT BY 3 NOCACHE;

CREATE TABLE vendedor (
  id_empleado NUMBER PRIMARY KEY,
  comision    NUMBER(5,4) DEFAULT 0 NOT NULL,
  CONSTRAINT vendedor_empleado_fk FOREIGN KEY (id_empleado) REFERENCES empleado(id_empleado),
  CONSTRAINT vendedor_comision_ck CHECK (comision >= 0 AND comision <= 0.25)
);

/* Ventas (IDENTITY 5050 +3) y Detalle (cantidad >=1) */
CREATE TABLE venta (
  id_venta      NUMBER GENERATED ALWAYS AS IDENTITY (START WITH 5050 INCREMENT BY 3) PRIMARY KEY,
  fecha_venta   DATE DEFAULT SYSDATE NOT NULL,
  id_vendedor   NUMBER NOT NULL,
  id_medio_pago NUMBER NOT NULL,
  total         NUMBER(12,2),
  CONSTRAINT venta_vendedor_fk   FOREIGN KEY (id_vendedor)   REFERENCES vendedor(id_empleado),
  CONSTRAINT venta_mediopago_fk  FOREIGN KEY (id_medio_pago) REFERENCES medio_pago(id_medio_pago)
);

CREATE TABLE detalle_venta (
  id_venta      NUMBER NOT NULL,
  id_producto   NUMBER NOT NULL,
  cantidad      NUMBER(10) NOT NULL,
  precio_unit   NUMBER(12,2) NOT NULL,
  CONSTRAINT detalle_venta_pk PRIMARY KEY (id_venta, id_producto),
  CONSTRAINT dv_venta_fk    FOREIGN KEY (id_venta)    REFERENCES venta(id_venta),
  CONSTRAINT dv_producto_fk FOREIGN KEY (id_producto) REFERENCES producto(id_producto),
  CONSTRAINT dv_cantidad_ck CHECK (cantidad >= 1)
);

/* Vistas */
CREATE OR REPLACE VIEW vw_producto_info AS
SELECT p.id_producto, p.nombre AS nombre_producto,
       m.nombre AS marca, c.nombre AS categoria, f.nombre AS formato, o.nombre AS origen,
       p.precio_compra, p.precio_venta, p.stock, p.stock_minimo
FROM producto p
JOIN marca m     ON m.id_marca = p.id_marca
JOIN categoria c ON c.id_categoria = p.id_categoria
JOIN formato f   ON f.id_formato = p.id_formato
JOIN origen o    ON o.id_origen = p.id_origen;

CREATE OR REPLACE VIEW vw_empleado_datos AS
SELECT e.id_empleado,
       e.nombres || ' ' || e.ap_paterno || NVL2(e.ap_materno, ' '||e.ap_materno, '') AS nombre_completo,
       e.ap_paterno, e.sueldo_base, e.bono_jefatura, e.activo
FROM empleado e;

/* Poblamiento mínimo */
INSERT INTO region (nombre) VALUES ('Aysén');
INSERT INTO region (nombre) VALUES ('Metropolitana');
INSERT INTO comuna (nombre, id_region) VALUES ('Coyhaique', (SELECT id_region FROM region WHERE nombre='Aysén'));
INSERT INTO comuna (nombre, id_region) VALUES ('Las Condes', (SELECT id_region FROM region WHERE nombre='Metropolitana'));

INSERT INTO medio_pago (nombre) VALUES ('EFECTIVO');
INSERT INTO medio_pago (nombre) VALUES ('TARJETA');
INSERT INTO medio_pago (nombre) VALUES ('TRANSFERENCIA');

INSERT INTO marca (nombre) VALUES ('LaVaquita');
INSERT INTO marca (nombre) VALUES ('RefrescoMax');

INSERT INTO categoria (nombre) VALUES ('Lacteos');
INSERT INTO categoria (nombre) VALUES ('Bebidas');

INSERT INTO formato (nombre) VALUES ('1L');
INSERT INTO formato (nombre) VALUES ('500ml');

INSERT INTO origen (nombre) VALUES ('Nacional');
INSERT INTO origen (nombre) VALUES ('Importado');

INSERT INTO proveedor (nombre, email, telefono, id_comuna) VALUES ('Distribuciones Aysén', 'contacto@aysen.cl', '56911111111', (SELECT id_comuna FROM comuna WHERE nombre='Coyhaique'));
INSERT INTO proveedor (nombre, email, telefono, id_comuna) VALUES ('Bebidas Chile', 'ventas@bebidaschile.cl', '56922222222', (SELECT id_comuna FROM comuna WHERE nombre='Las Condes'));

INSERT INTO producto (nombre, id_marca, id_categoria, id_formato, id_origen, precio_compra, precio_venta, stock, stock_minimo, id_proveedor)
VALUES ('Leche Entera', (SELECT id_marca FROM marca WHERE nombre='LaVaquita'), (SELECT id_categoria FROM categoria WHERE nombre='Lacteos'),
        (SELECT id_formato FROM formato WHERE nombre='1L'), (SELECT id_origen FROM origen WHERE nombre='Nacional'),
        650, 950, 40, 5, (SELECT id_proveedor FROM proveedor WHERE nombre='Distribuciones Aysén'));

INSERT INTO producto (nombre, id_marca, id_categoria, id_formato, id_origen, precio_compra, precio_venta, stock, stock_minimo, id_proveedor)
VALUES ('Cola Zero', (SELECT id_marca FROM marca WHERE nombre='RefrescoMax'), (SELECT id_categoria FROM categoria WHERE nombre='Bebidas'),
        (SELECT id_formato FROM formato WHERE nombre='500ml'), (SELECT id_origen FROM origen WHERE nombre='Importado'),
        300, 600, 25, 3, (SELECT id_proveedor FROM proveedor WHERE nombre='Bebidas Chile'));

INSERT INTO afp (nombre) VALUES ('AFP Modelo');
INSERT INTO afp (nombre) VALUES ('AFP Habitat');

INSERT INTO salud (id_salud, nombre) VALUES (seq_salud.NEXTVAL, 'Fonasa');
INSERT INTO salud (id_salud, nombre) VALUES (seq_salud.NEXTVAL, 'Isapre Colmena');

INSERT INTO empleado (id_empleado, run_num, run_dv, nombres, ap_paterno, ap_materno, direccion, id_comuna, activo, sueldo_base, bono_jefatura, id_afp, id_salud)
VALUES (seq_empleado.NEXTVAL, 11111111, 'K', 'Ana', 'Pérez', 'Lagos', 'Av. Norte 123', (SELECT id_comuna FROM comuna WHERE nombre='Las Condes'),
        'S', 800000, 120000, (SELECT MIN(id_afp) FROM afp), (SELECT MIN(id_salud) FROM salud));

INSERT INTO empleado (id_empleado, run_num, run_dv, nombres, ap_paterno, ap_materno, direccion, id_comuna, activo, sueldo_base, bono_jefatura, id_afp, id_salud)
VALUES (seq_empleado.NEXTVAL, 22222222, '9', 'Luis', 'Gómez', NULL, 'Los Arrayanes 45', (SELECT id_comuna FROM comuna WHERE nombre='Coyhaique'),
        'S', 560000, NULL, (SELECT MAX(id_afp) FROM afp), (SELECT MAX(id_salud) FROM salud));

INSERT INTO empleado (id_empleado, run_num, run_dv, nombres, ap_paterno, ap_materno, direccion, id_comuna, activo, sueldo_base, bono_jefatura, id_afp, id_salud)
VALUES (seq_empleado.NEXTVAL, 33333333, '7', 'María', 'Rivas', 'Toro', 'Calle Larga 12', (SELECT id_comuna FROM comuna WHERE nombre='Coyhaique'),
        'N', 420000, 50000, (SELECT MIN(id_afp) FROM afp), (SELECT MIN(id_salud) FROM salud));

INSERT INTO vendedor (id_empleado, comision)
SELECT id_empleado, 0.10 FROM empleado WHERE ap_paterno IN ('Pérez','Gómez');

INSERT INTO venta (id_vendedor, id_medio_pago, total)
VALUES ((SELECT id_empleado FROM vendedor v JOIN empleado e ON e.id_empleado = v.id_empleado WHERE e.ap_paterno='Pérez'),
        (SELECT id_medio_pago FROM medio_pago WHERE nombre='EFECTIVO'), 0);

INSERT INTO detalle_venta (id_venta, id_producto, cantidad, precio_unit)
VALUES ((SELECT MIN(id_venta) FROM venta), (SELECT id_producto FROM producto WHERE nombre='Leche Entera'), 3,
        (SELECT precio_venta FROM producto WHERE nombre='Leche Entera'));

INSERT INTO detalle_venta (id_venta, id_producto, cantidad, precio_unit)
VALUES ((SELECT MIN(id_venta) FROM venta), (SELECT id_producto FROM producto WHERE nombre='Cola Zero'), 2,
        (SELECT precio_venta FROM producto WHERE nombre='Cola Zero'));

UPDATE venta v SET total = (SELECT SUM(cantidad*precio_unit) FROM detalle_venta d WHERE d.id_venta = v.id_venta);
COMMIT;

/* INFORME 1 */
SELECT
  e.id_empleado                              AS "IDENTIFICADOR",
  v.nombre_completo                          AS "NOMBRE COMPLETO",
  e.sueldo_base                              AS "SALARIO",
  e.bono_jefatura                            AS "BONIFICACION",
  (e.sueldo_base + e.bono_jefatura)          AS "SALARIO SIMULADO"
FROM empleado e
JOIN vw_empleado_datos v ON v.id_empleado = e.id_empleado
WHERE e.activo = 'S' AND e.bono_jefatura IS NOT NULL
ORDER BY "SALARIO SIMULADO" DESC, e.ap_paterno DESC;

/* INFORME 2 */
SELECT
  v.nombre_completo                           AS "EMPLEADO",
  e.sueldo_base                               AS "SUELDO",
  8                                           AS "POSIBLE AUMENTO",
  ROUND(e.sueldo_base * 1.08, 0)              AS "SALARIO SIMULADO"
FROM empleado e
JOIN vw_empleado_datos v ON v.id_empleado = e.id_empleado
WHERE e.sueldo_base BETWEEN 550000 AND 800000
ORDER BY "SUELDO" ASC;

/* Consultas adicionales (WHERE, IN, LIKE, BETWEEN, IS NULL, NOT IN) */
SELECT p.nombre AS "PRODUCTO", p.stock AS "STOCK", p.stock_minimo AS "STOCK MÍNIMO",
       (p.stock - p.stock_minimo) AS "DIFERENCIA"
FROM producto p
WHERE p.stock <= p.stock_minimo
ORDER BY "DIFERENCIA" ASC;

SELECT pr.nombre AS "PROVEEDOR", pr.email, c.nombre AS "COMUNA"
FROM proveedor pr
JOIN comuna c ON c.id_comuna = pr.id_comuna
WHERE c.nombre IN ('Coyhaique','Las Condes') AND pr.email IS NOT NULL
ORDER BY pr.nombre;

SELECT e.id_empleado, v.nombre_completo, e.sueldo_base
FROM empleado e
JOIN vw_empleado_datos v ON v.id_empleado = e.id_empleado
WHERE e.activo = 'S' AND (e.ap_paterno LIKE 'P%' OR e.ap_paterno LIKE 'G%')
ORDER BY e.sueldo_base DESC;

SELECT p.id_producto, p.nombre, ca.nombre AS categoria
FROM producto p
JOIN categoria ca ON ca.id_categoria = p.id_categoria
WHERE ca.nombre NOT IN ('Lacteos')
ORDER BY p.id_producto;

/* Variables de sustitución (&, &&) */
SELECT v.nombre_completo AS empleado, e.sueldo_base AS sueldo
FROM empleado e
JOIN vw_empleado_datos v ON v.id_empleado = e.id_empleado
WHERE e.sueldo_base BETWEEN &min_sueldo AND &max_sueldo
ORDER BY sueldo DESC;

SELECT v.nombre_completo, e.sueldo_base, e.bono_jefatura, e.ap_paterno AS ap
FROM empleado e
JOIN vw_empleado_datos v ON v.id_empleado = e.id_empleado
ORDER BY &&col;
-- UNDEFINE col
